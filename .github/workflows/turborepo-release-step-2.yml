name: 2. Turborepo Release (go binary)

env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Staging branch to run release from"

jobs:
  #  smoke-test:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v3
  #        with:
  #          ref: ${{ inputs.release_branch }}
  #      - uses: ./.github/actions/setup-node
  #        with:
  #          enable-corepack: false
  #      - uses: ./.github/actions/setup-go
  #        with:
  #          github-token: "${{ secrets.GITHUB_TOKEN }}"
  #      - name: Test
  #        run: pnpm -- turbo run test --filter=cli --color

  #  darwin:
  #    needs: []
  #    runs-on: macos-latest
  #    steps:
  #      - uses: actions/checkout@v3
  #        with:
  #          ref: ${{ inputs.release_branch }}
  #      - run: git fetch origin --tags
  #      - uses: ./.github/actions/setup-go
  #        with:
  #          github-token: "${{ secrets.GITHUB_TOKEN }}"
  #      - uses: actions-rs/toolchain@v1
  #      - run: |
  #          rustup target add x86_64-apple-darwin
  #          rustup target add aarch64-apple-darwin
  #      - name: Install GoReleaser
  #        uses: goreleaser/goreleaser-action@v3
  #        with:
  #          distribution: goreleaser-pro
  #          version: latest
  #          install-only: true
  #        env:
  #          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
  #      - name: Build Artifacts
  #        run: cd cli && make build-go-turbo-darwin
  #        env:
  #          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
  #      - name: Upload Artifacts
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: turbo-go-darwin-${{ inputs.release_branch }}
  #          path: cli/dist-darwin

  # compiles linux and windows in a container
  cross:
    needs: []
    runs-on: ubuntu-latest
    container:
      image: docker://ghcr.io/vercel/turbo-cross:v1.18.5
    steps:
      - uses: actions/checkout@v3
        with:
          ref: "${{ inputs.release_branch }}"
      - run: git fetch origin --tags
      - uses: ./.github/actions/setup-go
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - run: apt-get install -y build-essential musl-tools gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
        # Yes, I'm aware of the irony of installing Zig to compile our Go + Rust project
      - run: |
          mkdir ../zig
          curl --show-error --location https://ziglang.org/builds/zig-linux-x86_64-0.11.0-dev.1908+06b263825.tar.xz | tar -J -xf - -C ../zig --strip-components 1
          export PATH=$PATH:$(pwd)/../zig
          echo "$(pwd)/../zig" >> $GITHUB_PATH
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - run: |
          rustup target add aarch64-unknown-linux-musl
          rustup component add rust-src
          rustup component add rust-src --target aarch64-unknown-linux-musl --toolchain nightly
          rustup target add x86_64-unknown-linux-musl
      - run: |
          # for convenience we have precompiled libraries for the various toolchains (windows and musl)
          # these were built locally and are hosted on github releases, since we plan on stripping this
          # out entirely asap

          # Create directory for aarch64-linux-musl libraries
          mkdir -p /usr/aarch64-linux-musl/lib
          curl -L https://github.com/arlyon/turbo/releases/download/zlib/libz.a > /usr/x86_64-w64-mingw32/lib/libz.a
          curl -L https://github.com/nicholaslyang/turbo/releases/download/zlib-aarch64-linux-musl/libz.a > /usr/aarch64-linux-musl/lib/libz.a
          curl -L https://github.com/nicholaslyang/turbo/releases/download/zlib-x86_64-linux-musl/libz.a > /usr/lib/libz.a
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser-pro
          version: latest
          install-only: true
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
      - name: Build Artifacts
        run: cd cli && make build-go-turbo-cross
        env:
          CC_aarch64_unknown_linux_musl: zig cc -target aarch64-linux-musl
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: turbo-go-cross-${{ inputs.release_branch }}
          path: cli/dist-cross
